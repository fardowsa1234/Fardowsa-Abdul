CREATE TABLE IF NOT EXISTS members (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    membertype TEXT,
    prnno TEXT,
    idno TEXT,
    firstname TEXT,
    lastname TEXT,
    address1 TEXT,
    address2 TEXT,
    postcode TEXT,
    mobile TEXT,
    bookid TEXT,
    booktitle TEXT,
    author TEXT,
    dateborrowed TEXT,
    daysonbook TEXT,
    dateoverdue TEXT,
    latereturnfine TEXT
);


#CRUD OPERATION

#Add Data  

def add_data(self):
    try:
        self.cur.execute('''INSERT INTO members (membertype, prnno, idno, firstname, lastname, address1, address2, postcode,
                        mobile, bookid, booktitle, author, dateborrowed, daysonbook, dateoverdue, latereturnfine)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''',
                         (self.comMember.get(),
                          self.entries['prnno'].get(),
                          self.entries['idno'].get(),
                          self.entries['firstname'].get(),
                          self.entries['lastname'].get(),
                          self.entries['address1'].get(),
                          self.entries['address2'].get(),
                          self.entries['postcode'].get(),
                          self.entries['mobile'].get(),
                          self.entries['bookid'].get(),
                          self.entries['booktitle'].get(),
                          self.entries['author'].get(),
                          self.entries['dateborrowed'].get(),
                          self.entries['daysonbook'].get(),
                          self.entries['dateoverdue'].get(),
                          self.entries['latereturnfine'].get()))
        self.conn.commit()
        self.show_data()
        messagebox.showinfo("Success", "Record added successfully")
    except Exception as e:
        messagebox.showerror("Error", str(e))

        ######Show data

        def show_data(self):
    self.cur.execute("SELECT * FROM members")
    rows = self.cur.fetchall()
    if len(rows) != 0:
        self.library_table.delete(*self.library_table.get_children())
        for row in rows:
            self.library_table.insert('', END, values=row)
        self.conn.commit()

##Update Data

def update_data(self):
    try:
        self.cur.execute('''UPDATE members SET membertype=?, prnno=?, idno=?, firstname=?, lastname=?, address1=?, address2=?,
                        postcode=?, mobile=?, bookid=?, booktitle=?, author=?, dateborrowed=?, daysonbook=?, dateoverdue=?,
                        latereturnfine=? WHERE id=?''',
                         (self.comMember.get(),
                          self.entries['prnno'].get(),
                          self.entries['idno'].get(),
                          self.entries['firstname'].get(),
                          self.entries['lastname'].get(),
                          self.entries['address1'].get(),
                          self.entries['address2'].get(),
                          self.entries['postcode'].get(),
                          self.entries['mobile'].get(),
                          self.entries['bookid'].get(),
                          self.entries['booktitle'].get(),
                          self.entries['author'].get(),
                          self.entries['dateborrowed'].get(),
                          self.entries['daysonbook'].get(),
                          self.entries['dateoverdue'].get(),
                          self.entries['latereturnfine'].get(),
                          self.selected_id))
        self.conn.commit()
        self.show_data()
        messagebox.showinfo("Success", "Record updated successfully")
    except Exception as e:
        messagebox.showerror("Error", str(e))


##Delete the record

def delete_data(self):
    if self.selected_id is None:
        messagebox.showerror("Error", "No record selected")
        return

    try:
        self.cur.execute('DELETE FROM members WHERE id=?', (self.selected_id,))
        self.conn.commit()
        self.show_data()
        messagebox.showinfo("Success", "Record deleted successfully")
        self.selected_id = None  # Clear the selected_id after deletion
    except Exception as e:
        messagebox.showerror("Error", str(e))




##Reset the selected

def reset_data(self):
    for entry in self.entries.values():
        entry.delete(0, END)
    self.comMember.set('')


##Get Cursor

def get_cursor(self, event=""):
    cursor_row = self.library_table.focus()
    contents = self.library_table.item(cursor_row)
    row = contents['values']
    if row:
        self.selected_id = row[0]
        self.comMember.set(row[1])
        self.entries['prnno'].delete(0, END)
        self.entries['prnno'].insert(END, row[2])
        self.entries['idno'].delete(0, END)
        self.entries['idno'].insert(END, row[3])
        self.entries['firstname'].delete(0, END)
        self.entries['firstname'].insert(END, row[4])
        self.entries['lastname'].delete(0, END)
        self.entries['lastname'].insert(END, row[5])
        self.entries['address1'].delete(0, END)
        self.entries['address1'].insert(END, row[6])
        self.entries['address2'].delete(0, END)
        self.entries['address2'].insert(END, row[7])
        self.entries['postcode'].delete(0, END)
        self.entries['postcode'].insert(END, row[8])
        self.entries['mobile'].delete(0, END)
        self.entries['mobile'].insert(END, row[9])
        self.entries['bookid'].delete(0, END)
        self.entries['bookid'].insert(END, row[10])
        self.entries['booktitle'].delete(0, END)
        self.entries['booktitle'].insert(END, row[11])
        self.entries['author'].delete(0, END)
        self.entries['author'].insert(END, row[12])
        self.entries['dateborrowed'].delete(0, END)
        self.entries['dateborrowed'].insert(END, row[13])
        self.entries['daysonbook'].delete(0, END)
        self.entries['daysonbook'].insert(END, row[14])
        self.entries['dateoverdue'].delete(0, END)
        self.entries['dateoverdue'].insert(END, row[15])
        self.entries['latereturnfine'].delete(0, END)
        self.entries['latereturnfine'].insert(END, row[16])

